{"version":3,"sources":["components/Movie.tsx","components/MoviesList.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Movie.module.css","components/MoviesList.module.css"],"names":["Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","id","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","a","fetch","response","ok","Error","json","data","transformedMovies","results","episode_id","opening_crawl","release_date","message","useEffect","content","length","MoviesList","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"2QAkBeA,EAVD,SAACC,GACb,OACE,qBAAIC,UAAWC,IAAQC,MAAvB,UACE,6BAAKH,EAAMI,QACX,6BAAKJ,EAAMK,cACX,4BAAIL,EAAMM,kB,gBCYDC,EAfG,SAACP,GACjB,OACE,oBAAIC,UAAWC,IAAQ,eAAvB,SACGF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAEEC,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,aAHdH,EAAMO,U,MC4CNC,MAtDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNJ,EADM,KACEK,EADF,OAEqBD,oBAAS,GAF9B,mBAENE,EAFM,KAEKC,EAFL,OAGaH,mBAAwB,MAHrC,mBAGNI,EAHM,KAGCC,EAHD,KAKPC,EAAqBC,sBAAW,sBAAC,gCAAAC,EAAA,6DACrCL,GAAa,GACbE,EAAS,MAF4B,kBAIZI,MAAM,gCAJM,WAI7BC,EAJ6B,QAKrBC,GALqB,sBAM3B,IAAIC,MAAM,yBANiB,wBAQhBF,EAASG,OARO,QAQ7BC,EAR6B,OAU7BC,EAAoBD,EAAKE,QAAQnB,KAAI,SAACN,GAC1C,MAAO,CACLO,GAAIP,EAAM0B,WACVzB,MAAOD,EAAMC,MACbE,YAAaH,EAAM2B,cACnBzB,YAAaF,EAAM4B,iBAGvBlB,EAAUc,GAlByB,kDAoBnCV,EAAS,KAAMe,SApBoB,QAuBrCjB,GAAa,GAvBwB,0DAwBpC,IAEHkB,qBAAU,WACRf,MACC,CAACA,IAEJ,IAAIgB,EAAU,qDASd,OARI1B,EAAO2B,OAAS,EAClBD,EAAU,cAACE,EAAD,CAAY5B,OAAQA,IACrBQ,EACTkB,EAAU,4BAAIlB,IACLF,IACToB,EAAU,4CAIV,qCACE,kCACE,wBAAQG,QAASnB,EAAjB,4BAEF,kCAAUgB,QCxCDI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,MAAQ,uB,kBCA1BD,EAAOC,QAAU,CAAC,cAAc,mC","file":"static/js/main.f9f45c62.chunk.js","sourcesContent":["import React from \"react\";\n\nimport classes from \"./Movie.module.css\";\ntype Props = {\n  title: string;\n  releaseDate: string;\n  openingText: string;\n};\nconst Movie = (props: Props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from \"react\";\n\nimport Movie from \"./Movie\";\nimport classes from \"./MoviesList.module.css\";\nimport movie from \"../model/movie\";\n\ntype Props = {\n  movies: movie[];\n};\n\nconst MovieList = (props: Props) => {\n  return (\n    <ul className={classes[\"movies-list\"]}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong.\");\n      }\n      const data = await response.json();\n\n      const transformedMovies = data.results.map((movie: any) => {\n        return {\n          id: movie.episode_id,\n          title: movie.title,\n          openingText: movie.opening_crawl,\n          releaseDate: movie.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  let content = <p>No movies available.</p>;\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  } else if (error) {\n    content = <p>{error}</p>;\n  } else if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};"],"sourceRoot":""}